# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, and test .NET Core application.
name: NTP Service

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: NtpService
      Test_Results_Path: NtpUnitTests\TestResults
      Test_Results_File: test_results.trx
      Readme_Path: README.md
      Git_Push_Script: .github/scripts/git-push.ps1
      Badge_Script: .github/scripts/badge-url.ps1
      Gh_Actions_Email: "github-actions@github.com"
      Gh_Actions_User_Name: "github-actions"

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Build the application
    - name: Buid the application
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:PostBuildEvent=""
      env:
        Configuration: ${{ matrix.configuration }}

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test --collect:"XPlat Code Coverage" --logger "trx;LogFileName=$env:Test_Results_File"
    
    # Install ReportGenerator
    - name: "Install ReportGenerator CLI [Debug configuration only]"
      if: matrix.configuration == 'Debug'
      run: dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.4.8
    
    # Generate and present coverage report`
    - name: "Coverage Report [Debug configuration only]"
      if: matrix.configuration == 'Debug'
      run: |
        reportgenerator -reports:NtpUnitTests/TestResults/**/coverage.cobertura.xml -targetdir:coveragereport -reporttypes:Html,TextSummary,Badges -classfilters:-Program
        cat .\coveragereport\Summary.txt

    # Update passrate badge
    - name: "Update passrate badge in README.md [Debug configuration only]"
      if: matrix.configuration == 'Debug'
      run: |
        $badgePattern = '\[!\[Unit tests\]\(https://img\.shields\.io/badge/Unit%20tests-Passed%3A[0-9]+%20Failed%3A[0-9]+-[a-z]+\)\]\(https://github\.com/grzegorz-ozanski/ntp-service/actions/runs/[0-9]+\)'
        $badge = & ${env:Badge_Script} $env:Test_Results_Path\$env:Test_Results_File
        $newBadge = "[![Unit tests]($badge)](https://github.com/grzegorz-ozanski/ntp-service/actions/runs/${{ github.run_id }})"

        (Get-Content ${env:Readme_Path}) -replace $badgePattern, $newBadge | Set-Content ${env:Readme_Path}

    - name: "Commit updated README [Debug configuration only]"
      if: matrix.configuration == 'Debug'
      run: |
        pwsh -File ${env:Git_Push_Script} `
        ${env:Readme_Path} `
        "Update passrate badge [skip ci]" `
        ${env:Gh_Actions_User_Name} `
        ${env:Gh_Actions_Email}

    - name: "Deploy coverage badge to GitHub Pages [Debug configuration only]"
      if: matrix.configuration == 'Debug'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./coveragereport
        destination_dir: coverage
        publish_branch: gh-pages
        force_orphan: true
